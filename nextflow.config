/*
Main configuration file:
Contains the following sections
	- Shell handling
	- External configuration files to include
	- Parameters
	- Profiles
	- Workflow introspection
	- Manifest
	- Resource requirement function
*/

/*
################################################################################
Shell handling
-e: Exit immediately when command fails
-u: Exit if variable is unset
-o pipefail: prevents piping from causing a non-zero exit status
################################################################################
*/

process.shell = ['/bin/bash', '-euo', 'pipefail']

/*
################################################################################
Pipeline configuration files
################################################################################
*/

// includeConfig 'conf/genome.config'
includeConfig 'conf/base.config'

/*
################################################################################
Parameters
################################################################################
*/

params {

    // Help message
    help                        = false

    // Main parameters
    pipeline                    = false
    files_dir                   = false
    files_ext                   = false
    files_type                  = false
    outdir                      = 'outdir-default'
    email                       = false

	// MSA arguments
    aligner                     = false
    aligner_args                = false
    pep2nuc                     = false
    nucleotide_dir              = false
    nucleotide_ext              = false
    clean_alignments            = false
    gblocks_args                = false

    // HyPhy arguments
    method                      = false
    tree                        = false
    pvalue                      = false
    fel_optional                = false
    slac_optional               = false
    fubar_optional              = false
    meme_optional               = false
    absrel_optional             = false
    busted_optional             = false
    relax_optional              = false

    // CodeML parameters
    models                      = false
    trees                       = false
    tests                       = false
    codeml_optional             = false

    // Transcript Curate parameters
    cdhit_pid                   = false
    database_dir               = false
    completeORFs                = false

    // SLURM specific: Defaults only, expecting to be overwritten
    max_memory                  = 128.GB
    max_cpus                    = 16
    max_time                    = 120.h
    partition                   = false
}

/*
################################################################################
Profiles
################################################################################
*/

profiles {
    standard{
        process.executor = 'local'
    }
    slurm {
        executor.name = 'slurm'
        executor.queueSize = 10

        process.executor = 'slurm'
        process.queue = params.partition
        process.clusterOptions = "--nodes=1 --mail-user=$params.email --mail-type=FAIL"
    }
    conda {
        process.conda = "$projectDir/conf/conda.yaml"
        conda.cacheDir = "/hpcfs/users/$LOGNAME/nf-condaEnvs"
    }	  
}

/*
################################################################################
Workflow introspection
################################################################################
*/

report {
  enabled = true
  file = "${params.outdir}/reports/report.html"
}

timeline {
  enabled = true
  file = "${params.outdir}/reports/timeline.html"
}


dag {
  enabled = true
  file = "${params.outdir}/reports/DAG.svg"
}

trace {
  enabled = true
  fields = 'process,task_id,hash,name,attempt,status,exit,realtime,cpus,memory,%cpu,vmem,rss,submit,start,complete,duration,realtime,rchar,wchar'
  file = "${params.outdir}/reports/trace.txt"
}

/*
################################################################################
Check requested resources
################################################################################
*/

def check_resources(val, max){
	// Check CPU value doesn't exceed the node limit 
	if( val instanceof Integer ) {
        try {
            return Math.min( val, max as int)
        }
        catch( all ) {
            println "WARNING: Max cpus '${max}' is not valid. Using default value: ${val}"
            return val
        }
    }
    // Check the memory value does exceed the memory limit
    if(val instanceof nextflow.util.MemoryUnit){
        try{
            def other = max as nextflow.util.MemoryUnit
            return val.compareTo(other) == 1 ? other : val
        }
        catch(all){
            println "WARNING: Max memory '${max}' is not valid. Using default value ${val}"
            return val
        }
    }
    // Check that the time duration does not exceed walltime limits
    if( val instanceof nextflow.util.Duration ) {
        try {
            def other = max as nextflow.util.Duration
            return val.compareTo(other) == 1 ? other : val
        }   
        catch( all ) {
            println "WARNING: Max time '${max}' is not valid. Using default value: ${val}"
            return val
        }  
    }
    
}