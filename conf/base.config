process {
    // Default process values
    time = 1.h
    memory = 1.Gb
    cpus = 1

    // Error strategy
    errorStrategy = { task.exitStatus in [104,134,137,139,140,143] ? 'retry' : 'finish' }
    maxRetries = 3
    maxErrors = '-1'

    /*
    Process specific
    */
    withLabel: 'kmc' {
        time = { check_resources( 12.h * task.attempt, params.max_time) }
        memory = { check_resources(150.Gb * task.attempt, params.max_memory) }
        cpus = 40
    }

    withLabel: 'gs2' {
        time = { check_resources( 2.h * task.attempt, params.max_time) }
        memory = { check_resources(4.Gb * task.attempt, params.max_memory) }
        cpus = 1
    }
    

    withLabel: 'hififilter' {
        time = { check_resources( 6.h * task.attempt, params.max_time) }
        memory = { check_resources(8.Gb * task.attempt, params.max_memory) }
        cpus = 40
    }

    withLabel: 'seqkit_fq2fa' {
        time = { check_resources( 2.h * task.attempt, params.max_time) }
        memory = { check_resources(16.Gb * task.attempt, params.max_memory) }
        cpus = 40
    }

    withLabel: 'hifiasm' {
        time = { check_resources( 24.h * task.attempt, params.max_time) }
        memory = { check_resources(200.Gb * task.attempt, params.max_memory) }
        cpus = 40
    }

    withLabel: 'busco' {
        time = { check_resources( 5.h * task.attempt, params.max_time) }
        memory = { check_resources(150.Gb * task.attempt, params.max_memory) }
        cpus = 40
    }

    withLabel: 'bwa_idx' {
        time = { check_resources( 2.h * task.attempt, params.max_time) }
        memory = { check_resources(60.Gb * task.attempt, params.max_memory) }
        cpus = 1
    }

    withLabel: 'arima_1' {
        time = { check_resources( 10.h * task.attempt, params.max_time) }
        memory = { check_resources(40.Gb * task.attempt, params.max_memory) }
        cpus = 40
    }

    withLabel: 'arima_2' {
        time = { check_resources( 6.h * task.attempt, params.max_time) }
        memory = { check_resources(50.Gb * task.attempt, params.max_memory) }
        cpus = 20
    }

    withLabel: 'pinhic' {
        time = { check_resources( 2.h * task.attempt, params.max_time) }
        memory = { check_resources(16.Gb * task.attempt, params.max_memory) }
        cpus = 2
    }


    withLabel: 'salsa2' {
        time = { check_resources( 24.h * task.attempt, params.max_time) }
        memory = { check_resources(50.Gb * task.attempt, params.max_memory) }
        cpus = 2
    }

    withLabel: 'bam2mnd' {
        time = { check_resources( 2.h * task.attempt, params.max_time) }
        memory = { check_resources(35.Gb * task.attempt, params.max_memory) }
        cpus = 8
    }

    withLabel: 'juicertools' {
        time = { check_resources( 2.h * task.attempt, params.max_time) }
        memory = { check_resources(60.Gb * task.attempt, params.max_memory) }
        cpus = 16
    }

    withLabel: 'jb2fa' {
        time = { check_resources( 1.h * task.attempt, params.max_time) }
        memory = { check_resources(10.Gb * task.attempt, params.max_memory) }
        cpus = 2
    }

    withLabel: 'tgs' {
        time = 72.h
        memory = { check_resources(100.Gb * task.attempt, params.max_memory) }
        cpus = 40
    }

    withLabel: 'mm2_pb' {
        time = { check_resources( 5.h * task.attempt, params.max_time) }
        memory = { check_resources(40.Gb * task.attempt, params.max_memory) }
        cpus = 40
    }

    withLabel: 'mosdepth' {
        time = { check_resources( 2.h * task.attempt, params.max_time) }
        memory = { check_resources(8.Gb * task.attempt, params.max_memory) }
        cpus = 16
    }

    withLabel: 'flagstat' {
        time = { check_resources( 2.h * task.attempt, params.max_time) }
        memory = { check_resources(16.Gb * task.attempt, params.max_memory) }
        cpus = 16
    }

    withLabel: 'meryl' {
        time = { check_resources( 2.h * task.attempt, params.max_time) }
        memory = { check_resources(50.Gb * task.attempt, params.max_memory) }
        cpus = 40
    }

    withLabel: 'merqury' {
        time = { check_resources( 2.h * task.attempt, params.max_time) }
        memory = { check_resources(16.Gb * task.attempt, params.max_memory) }
        cpus = 8
    }

    withLabel: 'quast' {
        time = { check_resources( 2.h * task.attempt, params.max_time) }
        memory = { check_resources(4.Gb * task.attempt, params.max_memory) }
        cpus = 8
    }    

    // withLabel: 'juicer' {
    //     time = { check_resources( 24.h * task.attempt, params.max_time) }
    //     memory = { check_resources(100.Gb * task.attempt, params.max_memory) }
    //     cpus = 16
    // }


    /*
    Single core:
    */

    // withLabel: 'cores_mem_time_low' {
    //     time = { check_resources( 2.h * task.attempt, params.max_time) }
    //     memory = { check_resources(4.Gb * task.attempt, params.max_memory) }
    //     cpus = 1
    // }

    // withLabel: 'cores_low_mem_time_med' {
    //     time = { check_resources( 12.h * task.attempt, params.max_time) }
    //     memory = { check_resources(16.Gb * task.attempt, params.max_memory) }
    //     cpus = 1
    // }

    // withLabel: 'cores_low_mem_time_high' {
    //     time = { check_resources( 24.h * task.attempt, params.max_time) }
    //     memory = { check_resources(50.Gb * task.attempt, params.max_memory) }
    //     cpus = 1
    // }


    // /*
    // Parallel: High cores, low memory and time
    // */
    
    // withLabel: 'parallel_low' {
    //     time = { check_resources( 2.h * task.attempt, params.max_time) }
    //     memory = { check_resources(8.Gb * task.attempt, params.max_memory) }
    //     cpus = { check_resources(16 * task.attempt, params.max_cpus) }
    // }

    // withLabel: 'parallel_med' {
    //     time = { check_resources( 12.h * task.attempt, params.max_time) }
    //     memory = { check_resources(50.Gb * task.attempt, params.max_memory) }
    //     cpus = { check_resources(16 * task.attempt, params.max_cpus) }
    // }

    // withLabel: 'parallel_high' {
    //     time = { check_resources( 24.h * task.attempt, params.max_time) }
    //     memory = { check_resources(100.Gb * task.attempt, params.max_memory) }
    //     cpus = { check_resources(16 * task.attempt, params.max_cpus) }
    // }

    // /*
    // Parallel: Max cores - balanced time/memory
    // */
    
    // withLabel: 'cores_max_mem_time_low' {
    //     time = { check_resources( 2.h * task.attempt, params.max_time) }
    //     memory = { check_resources(16.Gb * task.attempt, params.max_memory) }
    //     cpus = { check_resources(40 * task.attempt, params.max_cpus) }
    // }

    // withLabel: 'cores_max_mem_time_med' {
    //     time = { check_resources( 16.h * task.attempt, params.max_time) }
    //     memory = { check_resources(50.Gb * task.attempt, params.max_memory) }
    //     cpus = { check_resources(40 * task.attempt, params.max_cpus) }
    // }

    // withLabel: 'cores_max_mem_time_high' {
    //     time = { check_resources( 24.h * task.attempt, params.max_time) }
    //     memory = { check_resources(200.Gb * task.attempt, params.max_memory) }
    //     cpus = { check_resources(40 * task.attempt, params.max_cpus) }
    // }

    // /*
    // Parallel: Max cores, medium time, lower memory
    // */
    // withLabel: 'cores_max_time_med_mem_low' {
    //     time = { check_resources( 32.h * task.attempt, params.max_time) }
    //     memory = { check_resources(40.Gb * task.attempt, params.max_memory) }
    //     cpus = { check_resources(40 * task.attempt, params.max_cpus) }
    // }

    // /*
    // Parallel: Max cores, large memory, varying time
    // */
    
    // withLabel: 'cores_mem_high_time_low' {
    //     time = { check_resources( 6.h * task.attempt, params.max_time) }
    //     memory = { check_resources(150.Gb * task.attempt, params.max_memory) }
    //     cpus = { check_resources(40 * task.attempt, params.max_cpus) }
    // }

    // withLabel: 'cores_mem_high_time_med' {
    //     time = { check_resources( 12.h * task.attempt, params.max_time) }
    //     memory = { check_resources(150.Gb * task.attempt, params.max_memory) }
    //     cpus = { check_resources(40 * task.attempt, params.max_cpus) }
    // }

    // withLabel: 'cores_mem_high_time_high' {
    //     time = { check_resources( 24.h * task.attempt, params.max_time) }
    //     memory = { check_resources(200.Gb * task.attempt, params.max_memory) }
    //     cpus = { check_resources(40 * task.attempt, params.max_cpus) }
    // }

    // /*
    // Resource: Balanced cores + memory + time
    // */

    // withLabel: 'balanced_low' {
    //     time = { check_resources( 2.h * task.attempt, params.max_time) }
    //     memory = { check_resources(4.Gb * task.attempt, params.max_memory) }
    //     cpus = { check_resources(1 * task.attempt, params.max_cpus) }
    // }

    // withLabel: 'balanced_med' {
    //     time = { check_resources( 8.h * task.attempt, params.max_time) }
    //     memory = { check_resources(32.Gb * task.attempt, params.max_memory) }
    //     cpus = { check_resources(16 * task.attempt, params.max_cpus) }
    // }

    // withLabel: 'balanced_high' {
    //     time = { check_resources( 24.h * task.attempt, params.max_time) }
    //     memory = { check_resources(100.Gb * task.attempt, params.max_memory) }
    //     cpus = { check_resources(32 * task.attempt, params.max_cpus) }
    // }

    // /*
    // Resource: High memory - single core
    // */

    // withLabel: 'highmem_singleCore_low' {
    //     time = { check_resources( 4.h * task.attempt, params.max_time) }
    //     memory = { check_resources(250.Gb * task.attempt, params.max_memory) }
    //     cpus = { check_resources(1 * task.attempt, params.max_cpus) }
    // }

    // withLabel: 'highmem_singleCore_med' {
    //     time = { check_resources( 12.h * task.attempt, params.max_time) }
    //     memory = { check_resources(250.Gb * task.attempt, params.max_memory) }
    //     cpus = { check_resources(1 * task.attempt, params.max_cpus) }
    // }

    // withLabel: 'highmem_singleCore_high' {
    //     time = { check_resources( 24.h * task.attempt, params.max_time) }
    //     memory = { check_resources(250.Gb * task.attempt, params.max_memory) }
    //     cpus = { check_resources(1 * task.attempt, params.max_cpus) }
    // }


    // /*
    // Resource: High memory - multicore
    // */

    // withLabel: 'highmem_multiCore_low' {
    //     time = { check_resources( 4.h * task.attempt, params.max_time) }
    //     memory = { check_resources(250.Gb * task.attempt, params.max_memory) }
    //     cpus = { check_resources(8 * task.attempt, params.max_cpus) }
    // }

    // withLabel: 'highmem_multiCore_med' {
    //     time = { check_resources( 12.h * task.attempt, params.max_time) }
    //     memory = { check_resources(300.Gb * task.attempt, params.max_memory) }
    //     cpus = { check_resources(30 * task.attempt, params.max_cpus) }
    // }

    // withLabel: 'highmem_multiCore_high' {
    //     time = { check_resources( 24.h * task.attempt, params.max_time) }
    //     memory = { check_resources(377.Gb * task.attempt, params.max_memory) }
    //     cpus = { check_resources(40 * task.attempt, params.max_cpus) }
    // }

}